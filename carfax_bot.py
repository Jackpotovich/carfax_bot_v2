import os
import requests
from telegram import Update, LabeledPrice
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext, PreCheckoutQueryHandler

# üîë –¢–≤–æ–π Telegram Bot API —Ç–æ–∫–µ–Ω
TELEGRAM_TOKEN = "–¢–í–û–ô_–¢–ï–õ–ï–ì–†–ê–ú_–¢–û–ö–ï–ù"

# üîë API-–∫–ª—é—á –¥–ª—è Carfax
CARFAX_API_KEY = "–¢–í–û–ô_CARFAX_API_–ö–õ–Æ–ß"

# üîë –ü–ª–∞—Ç—ë–∂–Ω—ã–π –∫–ª—é—á Stripe (–ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ @BotFather -> /setpayment)
PAYMENT_PROVIDER_TOKEN = "–¢–í–û–ô_STRIPE_PAYMENT_TOKEN"

# üí≤ –¶–µ–Ω–∞ –æ—Ç—á—ë—Ç–∞ (–≤ —Ü–µ–Ω—Ç–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä 500 = $5.00)
CARFAX_PRICE = 500

# ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º VIN
async def check_vin(update: Update, context: CallbackContext) -> None:
    vin = update.message.text.strip().upper()
    
    if len(vin) != 17:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞! VIN –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å **17 —Å–∏–º–≤–æ–ª–æ–≤**.")
        return

    await update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é VIN...")

    url = f"https://carfax-report.online/api.php?vin={vin}"
    response = requests.get(url)

    if response.status_code == 200:
        await update.message.reply_text(f"‚úÖ VIN –Ω–∞–π–¥–µ–Ω! üöó\n\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç—á—ë—Ç–∞: **$5.00**\n\n–ù–∞–∂–º–∏ /buy, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å.")
        context.user_data["vin"] = vin  # –°–æ—Ö—Ä–∞–Ω—è–µ–º VIN –¥–ª—è –æ–ø–ª–∞—Ç—ã
    else:
        await update.message.reply_text("‚ùå VIN –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")

# üí≥ –ü–æ–∫—É–ø–∫–∞ –æ—Ç—á—ë—Ç–∞
async def buy(update: Update, context: CallbackContext) -> None:
    chat_id = update.message.chat_id
    vin = context.user_data.get("vin")

    if not vin:
        await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å VIN –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏!")
        return

    title = "Carfax –û—Ç—á—ë—Ç"
    description = f"–û—Ç—á—ë—Ç –ø–æ VIN {vin}"
    payload = f"carfax_payment_{chat_id}_{vin}"
    currency = "USD"
    prices = [LabeledPrice("Carfax –û—Ç—á—ë—Ç", CARFAX_PRICE)]

    await context.bot.send_invoice(
        chat_id, title, description, payload,
        PAYMENT_PROVIDER_TOKEN, currency, prices
    )

# ‚úÖ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π
async def precheckout_callback(update: Update, context: CallbackContext) -> None:
    query = update.pre_checkout_query
    if query.invoice_payload.startswith("carfax_payment"):
        await query.answer(ok=True)
    else:
        await query.answer(ok=False, error_message="–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# üõ†Ô∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
async def successful_payment(update: Update, context: CallbackContext) -> None:
    chat_id = update.message.chat_id
    vin = context.user_data.get("vin")

    if not vin:
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: VIN –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await update.message.reply_text("üìë –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á—ë—Ç...")

    report_url = f"https://api.carfax.shop/report/getreport?key={CARFAX_API_KEY}&vin={vin}"
    response = requests.get(report_url)

    if response.status_code == 200:
        report_filename = f"carfax_report_{vin}.html"
        with open(report_filename, "w", encoding="utf-8") as file:
            file.write(response.text)

        with open(report_filename, "rb") as file:
            await context.bot.send_document(chat_id, file, caption=f"üöó **–û—Ç—á—ë—Ç Carfax –ø–æ VIN {vin}**")
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")

async def start(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! üöó –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ VIN –Ω–æ–º–µ—Ä, –∏ —è –ø—Ä–æ–≤–µ—Ä—é –µ–≥–æ. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Ç—ã —Å–º–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å Carfax-–æ—Ç—á—ë—Ç.")

async def main():
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("buy", buy))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, check_vin))
    application.add_handler(PreCheckoutQueryHandler(precheckout_callback))
    application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment))

    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await application.run_polling()

import asyncio

import asyncio

if __name__ == "__main__":
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    asyncio.run(main())  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π async-–∑–∞–ø—É—Å–∫ –±–µ–∑ –æ—à–∏–±–æ–∫
